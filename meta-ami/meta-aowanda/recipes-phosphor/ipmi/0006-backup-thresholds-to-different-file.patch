From 52883ec85a85b573659c7f53838540a9dad284db Mon Sep 17 00:00:00 2001
From: Ryon Heichelbech <ryonh@ami.com>
Date: Fri, 28 May 2021 10:15:54 -0400
Subject: [PATCH] backup thresholds to different file

---
 src/EntityManager.cpp | 137 ++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 137 insertions(+)

diff --git a/src/EntityManager.cpp b/src/EntityManager.cpp
index 4e76f2e..dd91172 100644
--- a/src/EntityManager.cpp
+++ b/src/EntityManager.cpp
@@ -45,6 +45,7 @@ constexpr const char* schemaDirectory = PACKAGE_DIR "configurations/schemas";
 constexpr const char* tempConfigDir = "/tmp/configuration/";
 constexpr const char* lastConfiguration = "/tmp/configuration/last.json";
 constexpr const char* currentConfiguration = "/var/configuration/system.json";
+constexpr const char* threshConfiguration = "/var/configuration/threshold.json";
 constexpr const char* globalSchema = "global.json";
 constexpr const int32_t MAX_MAPPER_DEPTH = 0;
 
@@ -489,6 +490,66 @@ bool writeJsonFiles(const nlohmann::json& systemConfiguration)
     }
     output << systemConfiguration.dump(4);
     output.close();
+    // write the thresholds to a different file
+    nlohmann::json jthresholds;
+    for (const auto& conf : systemConfiguration.items())
+    {
+        auto findThresh = conf.value().find("Thresholds");
+
+        if (findThresh != conf.value().end())
+        {
+            auto findName = conf.value().find("Name");
+            if (findName == conf.value().end())
+            {
+                continue;
+            }
+            const std::string* name = findName->get_ptr<const std::string*>();
+            if (name == nullptr)
+            {
+                continue;
+            }
+
+            jthresholds[*name] = *findThresh;
+        }
+
+        auto findExposes = conf.value().find("Exposes");
+
+        if (findExposes == conf.value().end())
+        {
+            continue;
+        }
+
+        for (const auto& expose : *findExposes)
+        {
+            findThresh = expose.find("Thresholds");
+            if (findThresh == expose.end())
+            {
+                continue;
+            }
+
+            auto findName = expose.find("Name");
+            if (findName == expose.end())
+            {
+                continue;
+            }
+            const std::string* name = findName->get_ptr<const std::string*>();
+            if (name == nullptr)
+            {
+                continue;
+            }
+
+            jthresholds[*name] = *findThresh;
+        }
+    }
+
+    std::ofstream threshout(threshConfiguration);
+    if (!threshout.good())
+    {
+        return false;
+    }
+    threshout << jthresholds.dump(4);
+    threshout.close();
+
     return true;
 }
 
@@ -1531,6 +1592,81 @@ void PerformScan::run()
                     _systemConfiguration[recordName] = record;
                     _missingConfigurations.erase(recordName);
                 }
+
+                // insert user thresholds
+                if (std::filesystem::is_regular_file(threshConfiguration))
+                {
+                    std::ifstream threshin(threshConfiguration);
+                    if (threshin.good())
+                    {
+                        auto jthresholds = nlohmann::json::parse(threshin, nullptr, false);
+                        if (jthresholds.is_discarded())
+                        {
+                            std::cerr << "syntax error in " << threshConfiguration << "\n";
+                        }
+                        else
+                        {
+                            for (auto& conf : _systemConfiguration.items())
+                            {
+                                auto findThresh = conf.value().find("Thresholds");
+
+                                if (findThresh != conf.value().end())
+                                {
+                                    auto findName = conf.value().find("Name");
+                                    if (findName == conf.value().end())
+                                    {
+                                        continue;
+                                    }
+                                    const std::string* name = findName->get_ptr<const std::string*>();
+                                    if (name == nullptr)
+                                    {
+                                        continue;
+                                    }
+                                    if (jthresholds.find(*name) != jthresholds.end())
+                                    {
+                                        conf.value()["Thresholds"] = jthresholds[*name];
+                                    }
+                                }
+
+                                auto findExposes = conf.value().find("Exposes");
+
+                                if (findExposes == conf.value().end())
+                                {
+                                    continue;
+                                }
+
+                                for (auto& expose : *findExposes)
+                                {
+                                    findThresh = expose.find("Thresholds");
+                                    if (findThresh == expose.end())
+                                    {
+                                        continue;
+                                    }
+
+                                    auto findName = expose.find("Name");
+                                    if (findName == expose.end())
+                                    {
+                                        continue;
+                                    }
+                                    const std::string* name = findName->get_ptr<const std::string*>();
+                                    if (name == nullptr)
+                                    {
+                                        continue;
+                                    }
+
+                                    if (jthresholds.find(*name) != jthresholds.end())
+                                    {
+                                        expose["Thresholds"] = jthresholds[*name];
+                                    }
+                                }
+                            }
+                        }
+                    }
+                    else
+                    {
+                        std::cerr << "unable to open " << threshConfiguration << "\n";
+                    }
+                }
             });
 
         // parse out dbus probes by discarding other probe types, store in a
@@ -1881,6 +2017,7 @@ int main()
                 else
                 {
                     lastJson = std::move(data);
+
                 }
             }
             else
-- 
2.17.1

